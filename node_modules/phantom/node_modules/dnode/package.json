{
  "name": "dnode",
  "version": "0.9.12",
  "description": "freestyle RPC",
  "main": "./index.js",
  "keywords": [
    "message passing",
    "rpc",
    "rmi",
    "drb",
    "remote",
    "communication",
    "websockets",
    "socket.io"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/dnode.git"
  },
  "directories": {
    "lib": ".",
    "examples": "./examples"
  },
  "dependencies": {
    "socket.io": "0.8.6",
    "socket.io-client": "https://github.com/substack/socket.io-client/tarball/master",
    "lazy": ">=1.0.5 <1.1",
    "dnode-protocol": "~0.1.2",
    "jsonify": "0.0.x"
  },
  "devDependencies": {
    "tap": "~0.2.4",
    "browserify": "~1.10.7",
    "uglify-js": "~1.2.5",
    "express": "~2.5.9"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "browserify": "browser/index.js",
  "engine": {
    "node": ">=0.6.0"
  },
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "dnode\n=====\n\n![dnode: freestyle rpc](http://substack.net/images/dnode.png)\n\nDNode is an asynchronous object-oriented RPC system for node.js that lets you\ncall remote functions.\n\n[![build status](https://secure.travis-ci.org/substack/dnode.png)](http://travis-ci.org/substack/dnode)\n\nIt works over network sockets and even in the browser with\n[socket.io](https://github.com/LearnBoost/Socket.IO).\n\nPlus, there are dnode implementations for\n[perl](http://github.com/substack/dnode-perl),\n[ruby](http://github.com/substack/dnode-ruby),\n[php](https://github.com/bergie/dnode-php),\nand\n[java](https://github.com/aslakhellesoy/dnode-java),\nso you can glue\ntogether all your backend processes.\n\ndnode between two node.js processes\n-----------------------------------\n\nJust write a server.js:\n\n```javascript\nvar dnode = require('dnode');\n\nvar server = dnode({\n    zing : function (n, cb) { cb(n * 100) }\n});\nserver.listen(5050);\n````\n\nRun it...\n\n    $ node server.js\n\nThen you can whip up a client.js that calls the server's `zing` function!\n\n```javascript\nvar dnode = require('dnode');\n\ndnode.connect(5050, function (remote) {\n    remote.zing(66, function (n) {\n        console.log('n = ' + n);\n    });\n});\n````\n\n*** \n\n    $ node client.js\n    n = 6600\n    ^C\n\ndnode on the browser\n--------------------\n\nWe can retrofit the previous example to run in the browser.\n\nJust write a server.js:\n\n````javascript\nvar express = require('express');\nvar app = express.createServer();\napp.use(express.static(__dirname));\n\napp.listen(8080);\nconsole.log('http://localhost:8080/');\n\n// then just pass the server app handle to .listen()!\n\nvar dnode = require('dnode');\nvar server = dnode({\n    zing : function (n, cb) { cb(n * 100) }\n});\nserver.listen(app);\n````\n\nand whip up an index.html:\n\n````html\n<html>\n<head>\n<script src=\"/dnode.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n    window.onload = function () {\n        \n        DNode.connect(function (remote) {\n            remote.zing(66, function (n) {\n                document.getElementById('result').innerHTML = n;\n            });\n        });\n        \n    };\n</script>\n</head>\n<body>\n\nn = <span id=\"result\">?</span>\n\n</body>\n</html>\n````\n\nthen just run the server.js:\n\n    $ node server.js\n    http://localhost:8080/\n\nand navigate to http://localhost:8080:\n\n![dnode in the browser](http://substack.net/images/dnode-slides/browser.png)\n\nAwesome it works!\n\nThe dnode browser source automatically gets hosted at `/dnode.js` and it also\nworks with\n[browserify](https://github.com/substack/node-browserify)\n[out of the box](https://github.com/substack/dnode/tree/master/examples/web-browserify).\n\nhow it works\n------------\n\nWhen you throw an object at dnode, a recursive traversal scrubs out all of the\n`function` objects nested in your data structure and a secondary data structure\nis sent along with remote requests that creates shim functions that create RPC\ncalls back to the side where the functions were originally defined.\n\nWhen you call a remote function, the same recursive traversal trick happens to\nthe arguments you pass along, so you can pass callbacks to your remote functions\nthat actually call you back over the wire when the remote side calls the shim\nfunction on the other end.\n\nBasically, dnode lets you call remote functions as if they were defined locally\nwithout using `eval()` or `Function.prototype.toString()`. Awesome!\n\nThe only catch is that because the function calls are traveling down the\nhigh-latency network, the return values of your functions are ignored. Use\n[continuation-passing\nstyle](http://en.wikipedia.org/wiki/Continuation-passing_style) instead!\n\nMore features:\n\n* symmetric design: both sides of the connection can host up methods for the\n    other side to call\n\n* use TCP streams, UNIX domain sockets, or websockets courtesy of socket.io!\n    (see below, just throw a webserver at `listen()`)\n\nmethods\n=======\n\ndnode(wrapper)\n--------------\n\nIf `wrapper` is an object, serve this object up to the other side every time.\n\nIf `wrapper` is a function, use it to build a new object for each new client.\nThe result of `new wrapper(remote, conn)` will be used, where `remote` is an\nempty object that will be filled with the other side's methods once the initial\nprotocol phase finishes and where `conn` is the connection object.\n\nBoth client and server can call `dnode()` with a wrapper.\n`dnode.connect()` and `dnode.listen()` are shortcut that set `wrapper` to `{}`.\n\n.connect(...)\n-------------\n\nConnect to a remote dnode service. Pass in a port, host, UNIX domain socket\npath, block, or options object in any order. The block function if present will\nbe executed with the remote object and the connection object once the remote\nobject is ready.\n\nYou can reconnect when the connection is refused or drops by passing in a\n`reconnect` option as the number of milliseconds to wait between reconnection\nattempts.\n\nReturns `this` so you can chain multiple connections.\n\n.listen(...)\n------------\n\nListen for incoming dnode clients. Pass in a port, host, UNIX domain socket\npath, block, or options object in any order. The block function if present will\nbe executed with the remote object and the connection object once the remote\nobject is ready for each client.\n\nIf you pass a webserver (http.Server, https.Server, connect, express) to\nlisten(), socket.io will be bound to the webserver and the dnode browser source\nwill be hosted at `options.mount || \"/dnode.js\"`.\n\nYou can pass options through to socket.io with the `io` parameter:\n\n````javascript\ndnode(...).listen(webserver, { io : { flashPolicyServer : false } });\n````\n\nReturns `this` so you can chain multiple listeners.\n\n.use(middleware)\n----------------\n\nYou can write your own dnode middleware with `.use()`. The `middleware` function\nyou pass will be called just like the constructor function that `dnode()` takes.\nYou can modify `this`, `remote`, and `conn` objects after the instance computed\nwith the `dnode()` constructor executes but before the methods are sent over the\nwire.\n\nReturns `this` so you can chain middlewares.\n\nthe connection object\n=====================\n\nWhen you pass a constructor function to `dnode()` you'll get a connection\nobject as the second argument to your constructor.\n\nThe connection object (`conn`) is an EventEmitter.\n\n* conn.id is a random hex string that uniquely identifies clients\n\n* conn.end() closes the connection and won't reconnect\n\n* conn emits 'ready' when the remote object has been fully populated from\n    the methods exchange\n\n* conn emits 'remote' at the same time as 'ready', except with the remote object\n    as an argument\n\n* conn emits 'end' when the connection drops\n\n* conn emits 'connect' when the connection is established\n\n* conn re-emits error events from the stream object\n\n* conn emits 'refused', 'drop', and 'reconnect' when reconnect is enabled\n\nmore examples\n-------------\n\nCheck out \n[the examples directory](https://github.com/substack/dnode/tree/master/examples/)\nof this distribution.\n\nYou'll find examples for using dnode with\n[connect](https://github.com/SenchaLabs/connect),\n[express](http://expressjs.com/),\n[https](https://github.com/substack/dnode/tree/master/examples/https),\nand authentication.\n\nThere's a chat server too!\n\ninstallation\n============\n\nUsing [npm](http://npmjs.org):\n\n    npm install dnode\n\nOr check out the repository and fetch the deps with npm, then build the bundle:\n\n    git clone https://github.com/substack/dnode.git\n    cd dnode\n    npm install --dev\n    node bin/bundle.js\n\nThe dnode dependencies are listed in the\n[package.json](https://github.com/substack/dnode/tree/master/package.json).\nIf you install with npm they will be fetched automatically.\n\nread more\n=========\n\n* [slides from my dnode talk at parisoma](http://substack.net/posts/9aabb1)\n\n* [Roll your own PubSub with DNode](http://substack.net/posts/9bac3e/Roll-your-own-PubSub-with-DNode)\n    (Note: EventEmitters are no longer exported directly, use\n    [browserify](https://github.com/substack/node-browserify) to get them back)\n\n* [DNode: Asynchronous Remote Method Invocation for Node.js and the Browser](http://substack.net/posts/85e1bd/DNode-Asynchronous-Remote-Method-Invocation-for-Node-js-and-the-Browser)\n\n* [Simon Willison's Weblog](http://simonwillison.net/2010/Jul/11/dnode/)\n\nprotocol\n========\n\nDNode uses a newline-terminated JSON protocol\n[documented in the dnode-protocol\nreadme](https://github.com/substack/dnode-protocol).\n\ndnode in other languages\n========================\n\nThese libraries implement the dnode protocol too so you can make RPC calls\nbetween scripts written in different languages.\n\n* [dnode-perl](http://github.com/substack/dnode-perl)\n* [dnode-ruby](http://github.com/substack/dnode-ruby)\n* [dnode-php](https://github.com/bergie/dnode-php)\n* [dnode-php-sync-client](https://github.com/erasys/dnode-php-sync-client) - minimalistic synchronous client for PHP\n* [dnode-java](https://github.com/aslakhellesoy/dnode-java)\n\nThere's a \n[dnode-python](https://github.com/jesusabdullah/dnode-python)\nin the works too but it's not finished yet.\n\nshameless plug\n==============\n\nWant to make sure your crazy javascript-heavy app still works in other\nbrowsers?\nGive [browserling](http://browserling.com) a spin!\nBrowsers in your browser. Powered by dnode.\n\n[![build status](https://secure.travis-ci.org/substack/dnode.png)](http://travis-ci.org/substack/dnode)\n\n",
  "_id": "dnode@0.9.12",
  "dist": {
    "shasum": "123bae36c86c99cf3c46aab406d689faf434f938"
  },
  "_from": "dnode@~0.9.12"
}
